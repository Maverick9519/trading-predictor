import os
import threading
import logging
import asyncio
import requests
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from flask import Flask
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –î–ª—è Render: –ø—Ä–∏–±—Ä–∞—Ç–∏ –∑–∞–π–≤—ñ TensorFlow –ª–æ–≥—É–≤–∞–Ω–Ω—è
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

# === –ê–ª–≥–æ—Ä–∏—Ç–º ===
def custom_algorithm(x: float, y: float, a: float, n: int) -> float:
    result = 0
    for i in range(n, 0, -1):
        result += (x**i + y) + a
    return result

# === –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ Bitcoin –∑ CoinGecko ===
def fetch_latest_data():
    url = "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart"
    params = {"vs_currency": "usd", "days": "30", "interval": "daily"}
    response = requests.get(url, params=params)
    data = response.json()

    if "prices" not in data:
        raise KeyError("‚ùå –î–∞–Ω—ñ –Ω–µ –º—ñ—Å—Ç—è—Ç—å –∫–ª—é—á–∞ 'prices'")
    
    prices = data["prices"]
    df = pd.DataFrame(prices, columns=["timestamp", "price"])
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
    df.set_index("timestamp", inplace=True)
    return df

# === –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—É ===
def plot_latest_data(df):
    fig, ax = plt.subplots()
    df.tail(30).plot(ax=ax, legend=False)
    plt.title("Bitcoin (30 –¥–Ω—ñ–≤)")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–¶—ñ–Ω–∞ (USD)")
    plt.tight_layout()
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    return buf

# === –ö–æ–º–∞–Ω–¥–∏ Telegram ===
async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        df = fetch_latest_data()
        now_price = df["price"].iloc[-1]
        predicted_price = now_price * 1.05  # –ü—Ä–æ—Å—Ç–∞ –º–æ–¥–µ–ª—å: +5%
        change = predicted_price - now_price
        change_pct = (change / now_price) * 100
        plot_buf = plot_latest_data(df)

        text = (
            f"üìä –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${now_price:.2f}\n"
            f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑: ${predicted_price:.2f}\n"
            f"üìà –ó–º—ñ–Ω–∞: ${change:.2f} ({change_pct:.2f}%)"
        )
        await update.message.reply_text(text)
        await update.message.reply_photo(photo=plot_buf)
    except Exception as e:
        logging.exception("‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É")
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def custom(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(context.args) != 4:
            await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ 4 –∞—Ä–≥—É–º–µ–Ω—Ç–∏: /custom x y a n")
            return
        x, y, a = float(context.args[0]), float(context.args[1]), float(context.args[2])
        n = int(context.args[3])
        result = custom_algorithm(x, y, a, n)
        await update.message.reply_text(f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç A = {result:.4f}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ /custom x y a n –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∞–±–æ /predict –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É.")

# === Flask –¥–ª—è keep-alive –Ω–∞ Render ===
flask_app = Flask(__name__)
@flask_app.route('/')
def index():
    return "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

def keep_alive():
    threading.Thread(target=lambda: flask_app.run(host='0.0.0.0', port=10000)).start()

# === Telegram Bot –∑–∞–ø—É—Å–∫ ===
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

async def run_bot():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("predict", predict))
    app.add_handler(CommandHandler("custom", custom))
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

def start_all():
    keep_alive()
    threading.Thread(target=lambda: asyncio.run(run_bot()), daemon=True).start()

if name == '__main__':
    start_all()
