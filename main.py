import os
import threading
import logging
import asyncio
import requests
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from flask import Flask
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
logging.basicConfig(level=logging.INFO)

# === –§–æ—Ä–º—É–ª–∞

def custom_algorithm(x: float, y: float, a: float, n: int) -> np.ndarray:
    return np.array([x ** k + y + a for k in range(1, n + 1)])

# === –¶—ñ–Ω–∞ BTC –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é

def fetch_historical_data(n=64):
    url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest"
    api_key = os.environ.get("COINMARKETCAP_API_KEY")
    if not api_key:
        raise RuntimeError("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ COINMARKETCAP_API_KEY —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

    headers = {
        "Accepts": "application/json",
        "X-CMC_PRO_API_KEY": api_key
    }
    params = {"symbol": "BTC", "convert": "USD"}

    prices = []
    for _ in range(n):
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        data = response.json()
        price = data["data"]["BTC"]["quote"]["USD"]["price"]
        prices.append(price)
        asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è API

    timestamps = pd.date_range(end=pd.Timestamp.now(), periods=n, freq='H')
    df = pd.DataFrame({"timestamp": timestamps, "price": prices})
    df.set_index("timestamp", inplace=True)
    return df

# === –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞ —Ü—ñ–Ω

def plot_latest_data(df):
    fig, ax = plt.subplots()
    df.plot(ax=ax, legend=False)
    plt.title("Bitcoin (–ø–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞)")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–¶—ñ–Ω–∞ (USD)")
    plt.tight_layout()
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    return buf

# === FFT-–æ–±—Ä–æ–±–∫–∞

def fft_filtered_signal(signal: np.ndarray, keep: int = 5) -> np.ndarray:
    fft_vals = np.fft.fft(signal)
    fft_filtered = fft_vals.copy()
    fft_filtered[keep:-keep] = 0
    return np.fft.ifft(fft_filtered).real

# === Telegram-–∫–æ–º–∞–Ω–¥–∏

async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        x, y, a, n = 1.1, 2.0, 1.0, 64
        signal = custom_algorithm(x, y, a, n)
        signal_fft = fft_filtered_signal(signal)

        fig, ax = plt.subplots()
        ax.plot(signal, label='–û—Ä–∏–≥—ñ–Ω–∞–ª')
        ax.plot(signal_fft, label='–§—É—Ä\'—î –ø—Ä–æ–≥–Ω–æ–∑', linestyle='--')
        ax.set_title("Custom —Å–∏–≥–Ω–∞–ª + FFT –ø—Ä–æ–≥–Ω–æ–∑")
        ax.set_xlabel("–ß–∞—Å (k)")
        ax.set_ylabel("–ó–Ω–∞—á–µ–Ω–Ω—è")
        ax.grid(True)
        ax.legend()

        buf = BytesIO()
        plt.tight_layout()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close(fig)

        await update.message.reply_text("üîç –°–∏–≥–Ω–∞–ª —Ç–∞ –π–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑ –ø—ñ—Å–ª—è –§—É—Ä'—î")
        await update.message.reply_photo(photo=buf)

    except Exception as e:
        logging.exception("‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É")
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def fftbtc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        df = fetch_historical_data(n=64)
        prices = df['price'].values
        prices_fft = fft_filtered_signal(prices)

        fig, ax = plt.subplots()
        ax.plot(df.index, prices, label='–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ')
        ax.plot(df.index, prices_fft, label='–§—É—Ä\'—î –ø—Ä–æ–≥–Ω–æ–∑', linestyle='--')
        ax.set_title("Bitcoin FFT –ü—Ä–æ–≥–Ω–æ–∑")
        ax.set_xlabel("–î–∞—Ç–∞")
        ax.set_ylabel("–¶—ñ–Ω–∞ (USD)")
        ax.grid(True)
        ax.legend()

        buf = BytesIO()
        plt.tight_layout()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close(fig)

        await update.message.reply_text("üìâ –¶—ñ–Ω–∏ BTC —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑ –ø—ñ—Å–ª—è –§—É—Ä'—î")
        await update.message.reply_photo(photo=buf)

    except Exception as e:
        logging.exception("‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ FFT BTC")
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def custom(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(context.args) != 4:
            await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ 4 –∞—Ä–≥—É–º–µ–Ω—Ç–∏: /custom x y a n")
            return
        x, y, a = float(context.args[0]), float(context.args[1]), float(context.args[2])
        n = int(context.args[3])
        result = custom_algorithm(x, y, a, n).sum()
        await update.message.reply_text(f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç A = {result:.4f}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥-–ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–æ—Ä –±–æ—Ç.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/predict ‚Äî FFT –Ω–∞ custom —Ñ–æ—Ä–º—É–ª—ñ\n"
        "/fftbtc ‚Äî FFT –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö BTC\n"
        "/custom x y a n ‚Äî –≤–ª–∞—Å–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞"
    )

# === Flask-—Å–µ—Ä–≤–µ—Ä

flask_app = Flask(__name__)

@flask_app.route('/')
def index():
    return "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

# === Telegram –±–æ—Ç

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

async def run_bot():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("predict", predict))
    app.add_handler(CommandHandler("fftbtc", fftbtc))
    app.add_handler(CommandHandler("custom", custom))
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await asyncio.Event().wait()

# === –ì–æ–ª–æ–≤–Ω–∏–π –∑–∞–ø—É—Å–∫

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 4000))
    threading.Thread(target=lambda: flask_app.run(host='0.0.0.0', port=port), daemon=True).start()
    asyncio.run(run_bot())
