import os
import threading
import logging
import asyncio
import requests
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from flask import Flask
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
logging.basicConfig(level=logging.INFO)

# === –§–æ—Ä–º—É–ª–∞

def custom_algorithm(x: float, y: float, a: float, n: int) -> float:
    return sum((x**i + y + a) for i in range(n, 0, -1))

# === –°–∏–Ω—Ç–µ—Ç–∏—á–Ω–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–ª–≥–æ—Ä–∏—Ç–º—É

def generate_signal(length=128, x=0.5, y=1.0, a=2.0, n=10):
    return np.array([custom_algorithm(x + i * 0.01, y, a, n) for i in range(length)])

# === –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –§—É—Ä'—î

def apply_fft(signal):
    fft_result = np.fft.fft(signal)
    frequencies = np.fft.fftfreq(len(signal))
    return frequencies, np.abs(fft_result)

# === –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞ –§—É—Ä'—î

def plot_fft(frequencies, magnitude):
    fig, ax = plt.subplots()
    ax.plot(frequencies[:len(frequencies) // 2], magnitude[:len(magnitude) // 2])
    ax.set_title("–ß–∞—Å—Ç–æ—Ç–Ω–∏–π —Å–ø–µ–∫—Ç—Ä (FFT)")
    ax.set_xlabel("–ß–∞—Å—Ç–æ—Ç–∞")
    ax.set_ylabel("–ê–º–ø–ª—ñ—Ç—É–¥–∞")
    buf = BytesIO()
    plt.tight_layout()
    plt.savefig(buf, format='png')
    buf.seek(0)
    return buf

# === –¶—ñ–Ω–∞ BTC

def fetch_latest_data():
    url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest"
    api_key = os.environ.get("COINMARKETCAP_API_KEY")
    if not api_key:
        raise RuntimeError("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ COINMARKETCAP_API_KEY —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

    headers = {
        "Accepts": "application/json",
        "X-CMC_PRO_API_KEY": api_key
    }
    params = {"symbol": "BTC", "convert": "USD"}

    response = requests.get(url, headers=headers, params=params)
    try:
        response.raise_for_status()
        data = response.json()
        price = data["data"]["BTC"]["quote"]["USD"]["price"]
        timestamp = pd.Timestamp.now()
        df = pd.DataFrame([[timestamp, price]], columns=["timestamp", "price"])
        df.set_index("timestamp", inplace=True)
        return df
    except Exception as e:
        raise RuntimeError(f"‚ùå API –ø–æ–º–∏–ª–∫–∞: {e}")

# === –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞

def plot_latest_data(df):
    fig, ax = plt.subplots()
    df.plot(ax=ax, legend=False)
    plt.title("Bitcoin (–ø–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞)")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–¶—ñ–Ω–∞ (USD)")
    plt.tight_layout()
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    return buf

# === Telegram-–∫–æ–º–∞–Ω–¥–∏

async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        signal = generate_signal()
        frequencies, magnitude = apply_fft(signal)
        plot_buf = plot_fft(frequencies, magnitude)
        await update.message.reply_photo(photo=plot_buf, caption="üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–≤–æ—î—ó —Ñ–æ—Ä–º—É–ª–∏ + FFT")
    except Exception as e:
        logging.exception("‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É")
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def custom(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(context.args) != 4:
            await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ 4 –∞—Ä–≥—É–º–µ–Ω—Ç–∏: /custom x y a n")
            return
        x, y, a = float(context.args[0]), float(context.args[1]), float(context.args[2])
        n = int(context.args[3])
        result = custom_algorithm(x, y, a, n)
        await update.message.reply_text(f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç A = {result:.4f}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥-–ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–æ—Ä –±–æ—Ç.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/predict ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ —á–µ—Ä–µ–∑ —Ç–≤–æ—é —Ñ–æ—Ä–º—É–ª—É + FFT\n"
        "/custom x y a n ‚Äî –æ–±—Ä–∞—Ö—É–Ω–æ–∫ –≤–ª–∞—Å–Ω–æ—ó —Ñ–æ—Ä–º—É–ª–∏\n"
    )

# === Flask-—Å–µ—Ä–≤–µ—Ä

flask_app = Flask(__name__)

@flask_app.route('/')
def index():
    return "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

# === Telegram –±–æ—Ç

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

async def run_bot():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("predict", predict))
    app.add_handler(CommandHandler("custom", custom))
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await asyncio.Event().wait()

# === –ì–æ–ª–æ–≤–Ω–∏–π –∑–∞–ø—É—Å–∫

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 4000))
    threading.Thread(target=lambda: flask_app.run(host='0.0.0.0', port=port), daemon=True).start()
    asyncio.run(run_bot())
