import os
import threading
import logging
import asyncio
import requests
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from flask import Flask
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# --- –ú—ñ–Ω—ñ–º—ñ–∑—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è TensorFlow (–Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫)
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
logging.basicConfig(level=logging.INFO)

# === –ê–ª–≥–æ—Ä–∏—Ç–º –∑ —Ñ–æ—Ä–º—É–ª–∏ A = ((x^n + y) + a) + ((x^{n-1} + y) + a) + ...
def custom_algorithm(x: float, y: float, a: float, n: int) -> float:
    return sum((x**i + y + a) for i in range(n, 0, -1))

# === –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Ü—ñ–Ω–∏ BTC –∑ CoinMarketCap
def fetch_latest_data():
    url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest"
    api_key = os.environ.get("COINMARKETCAP_API_KEY")

    if not api_key:
        raise RuntimeError("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ COINMARKETCAP_API_KEY —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

    headers = {
        "Accepts": "application/json",
        "X-CMC_PRO_API_KEY": api_key
    }

    params = {
        "symbol": "BTC",
        "convert": "USD"
    }

    response = requests.get(url, headers=headers, params=params)

    try:
        response.raise_for_status()
        data = response.json()

        if "data" not in data or "BTC" not in data["data"]:
            raise ValueError(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å API –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω–∏—Ö BTC: {data}")

        price = data["data"]["BTC"]["quote"]["USD"]["price"]
        timestamp = pd.Timestamp.now()
        df = pd.DataFrame([[timestamp, price]], columns=["timestamp", "price"])
        df.set_index("timestamp", inplace=True)
        return df

    except requests.exceptions.RequestException as req_err:
        raise RuntimeError(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑ HTTP-–∑–∞–ø–∏—Ç–æ–º: {req_err}")
    except ValueError as val_err:
        raise RuntimeError(f"‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å API: {val_err}")
    except Exception as e:
        raise RuntimeError("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ CoinMarketCap") from e

# === –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞ –∑ DataFrame
def plot_latest_data(df):
    fig, ax = plt.subplots()
    df.plot(ax=ax, legend=False)
    plt.title("Bitcoin (–ø–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞)")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–¶—ñ–Ω–∞ (USD)")
    plt.tight_layout()
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    return buf

# === Telegram –ö–æ–º–∞–Ω–¥–∏
async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        df = fetch_latest_data()
        now_price = df["price"].iloc[-1]
        predicted_price = now_price * 1.05
        change = predicted_price - now_price
        change_pct = (change / now_price) * 100
        plot_buf = plot_latest_data(df)

        text = (
            f"üìä –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${now_price:.2f}\n"
            f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑: ${predicted_price:.2f}\n"
            f"üìà –ó–º—ñ–Ω–∞: ${change:.2f} ({change_pct:.2f}%)"
        )
        await update.message.reply_text(text)
        await update.message.reply_photo(photo=plot_buf)
    except Exception as e:
        logging.exception("‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É")
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def custom(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(context.args) != 4:
            await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ 4 –∞—Ä–≥—É–º–µ–Ω—Ç–∏: /custom x y a n")
            return
        x, y, a = float(context.args[0]), float(context.args[1]), float(context.args[2])
        n = int(context.args[3])
        result = custom_algorithm(x, y, a, n)
        await update.message.reply_text(f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç A = {result:.4f}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥-–ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–æ—Ä –±–æ—Ç.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/predict ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑\n"
        "/custom x y a n ‚Äî –≤–ª–∞—Å–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞\n"
        "/auto [—Ö–≤] ‚Äî –∞–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑\n"
        "/stop ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ –∞–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑"
    )

# === –ê–≤—Ç–æ–ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
auto_tasks = {}

async def auto_predict(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    try:
        df = fetch_latest_data()
        now_price = df["price"].iloc[-1]
        predicted_price = now_price * 1.05
        change = predicted_price - now_price
        change_pct = (change / now_price) * 100
        plot_buf = plot_latest_data(df)

        text = (
            f"üìä –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${now_price:.2f}\n"
            f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑: ${predicted_price:.2f}\n"
            f"üìà –ó–º—ñ–Ω–∞: ${change:.2f} ({change_pct:.2f}%)"
        )
        await context.bot.send_message(chat_id=chat_id, text=text)
        await context.bot.send_photo(chat_id=chat_id, photo=plot_buf)
    except Exception as e:
        await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def auto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(context.args) != 1:
            await update.message.reply_text("‚ùóÔ∏è –§–æ—Ä–º–∞—Ç: /auto 5 (—Ö–≤–∏–ª–∏–Ω)")
            return

        minutes = int(context.args[0])
        chat_id = update.effective_chat.id

        if chat_id in auto_tasks:
            auto_tasks[chat_id].schedule_removal()

        job = context.job_queue.run_repeating(auto_predict, interval=minutes*60, first=0, chat_id=chat_id)
        auto_tasks[chat_id] = job
        await update.message.reply_text(f"‚úÖ –ê–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–∂–Ω—ñ {minutes} —Ö–≤–∏–ª–∏–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in auto_tasks:
        auto_tasks[chat_id].schedule_removal()
        del auto_tasks[chat_id]
        await update.message.reply_text("‚õîÔ∏è –ê–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑ –∑—É–ø–∏–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ùóÔ∏è –ê–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.")

# === Flask –¥–ª—è Render keep-alive
flask_app = Flask(__name__)
@flask_app.route('/')
def index():
    return "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

# === –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

async def run_bot():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("predict", predict))
    app.add_handler(CommandHandler("custom", custom))
    app.add_handler(CommandHandler("auto", auto))
    app.add_handler(CommandHandler("stop", stop))
    await app.initialize()
    await app.start()
    await app.updater.start_polling()

# === –ì–æ–ª–æ–≤–Ω–∏–π –∑–∞–ø—É—Å–∫
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 4000))
    threading.Thread(target=lambda: flask_app.run(host='0.0.0.0', port=port), daemon=True).start()
    loop = asyncio.get_event_loop()
    loop.create_task(run_bot())
    loop.run_forever()
