n = int(context.args[3])
        result = custom_algorithm(x, y, a, n)
        await update.message.reply_text(f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç A = {result:.4f}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥-–ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–æ—Ä –±–æ—Ç.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/predict ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑\n"
        "/custom x y a n ‚Äî –≤–ª–∞—Å–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞\n"
        "/auto [—Ö–≤] ‚Äî –∞–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑\n"
        "/stop ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ –∞–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑"
    )

# === –ê–≤—Ç–æ–ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
auto_tasks = {}

async def auto_predict(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    try:
        df = fetch_latest_data()
        now_price = df["price"].iloc[-1]
        predicted_price = now_price * 1.05
        change = predicted_price - now_price
        change_pct = (change / now_price) * 100
        plot_buf = plot_latest_data(df)

        text = (
            f"üìä –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${now_price:.2f}\n"
            f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑: ${predicted_price:.2f}\n"
            f"üìà –ó–º—ñ–Ω–∞: ${change:.2f} ({change_pct:.2f}%)"
        )
        await context.bot.send_message(chat_id=chat_id, text=text)
        await context.bot.send_photo(chat_id=chat_id, photo=plot_buf)
    except Exception as e:
        await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def auto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(context.args) != 1:
            await update.message.reply_text("‚ùóÔ∏è –§–æ—Ä–º–∞—Ç: /auto 5 (—Ö–≤–∏–ª–∏–Ω)")
            return

        minutes = int(context.args[0])
        chat_id = update.effective_chat.id

        if chat_id in auto_tasks:
            auto_tasks[chat_id].schedule_removal()

        job = context.job_queue.run_repeating(auto_predict, interval=minutes*60, first=0, chat_id=chat_id)
        auto_tasks[chat_id] = job
        await update.message.reply_text(f"‚úÖ –ê–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–∂–Ω—ñ {minutes} —Ö–≤–∏–ª–∏–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in auto_tasks:
        auto_tasks[chat_id].schedule_removal()
        del auto_tasks[chat_id]
        await update.message.reply_text("‚õîÔ∏è –ê–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑ –∑—É–ø–∏–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ùóÔ∏è –ê–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.")

# === Flask –¥–ª—è Render keep-alive
flask_app = Flask(__name__)

@flask_app.route('/')
def index():
    return "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

# === –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

async def run_bot():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("predict", predict))
    app.add_handler(CommandHandler("custom", custom))
    app.add_handler(CommandHandler("auto", auto))
    app.add_handler(CommandHandler("stop", stop))
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await asyncio.Event().wait()  # –≤–∞–∂–ª–∏–≤–æ –¥–ª—è Render

# === –ì–æ–ª–æ–≤–Ω–∏–π –∑–∞–ø—É—Å–∫
if name == '__main__':
    port = int(os.environ.get("PORT", 4000))
    threading.Thread(target=lambda: flask_app.run(host='0.0.0.0', port=port), daemon=True).start()
    asyncio.run(run_bot())
