import os
import threading
import logging
import asyncio
import requests
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from flask import Flask
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

import yfinance as yf
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
logging.basicConfig(level=logging.INFO)

# === –§–æ—Ä–º—É–ª–∞
def custom_algorithm(x: float, y: float, a: float, n: int) -> float:
    return sum((x**i + y + a) for i in range(n, 0, -1))

# === –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ BTC
def fetch_latest_data():
    url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest"
    api_key = os.environ.get("COINMARKETCAP_API_KEY")
    if not api_key:
        raise RuntimeError("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ COINMARKETCAP_API_KEY —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

    headers = {
        "Accepts": "application/json",
        "X-CMC_PRO_API_KEY": api_key
    }
    params = {"symbol": "BTC", "convert": "USD"}
    response = requests.get(url, headers=headers, params=params)
    response.raise_for_status()
    data = response.json()
    price = data["data"]["BTC"]["quote"]["USD"]["price"]
    timestamp = pd.Timestamp.now()
    df = pd.DataFrame([[timestamp, price]], columns=["timestamp", "price"])
    df.set_index("timestamp", inplace=True)
    return df

# === –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞ —Ü—ñ–Ω–∏ BTC
def plot_latest_data(df):
    fig, ax = plt.subplots()
    df.plot(ax=ax, legend=False)
    plt.title("Bitcoin (–ø–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞)")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–¶—ñ–Ω–∞ (USD)")
    plt.tight_layout()
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    return buf

# === Linear Regression
def linear_predict_price():
    df = yf.download("BTC-USD", period="2d", interval="1h")
    df.dropna(inplace=True)

    X = np.arange(len(df)).reshape(-1, 1)
    y = df["Close"].values

    model = LinearRegression()
    model.fit(X, y)

    next_index = np.array([[len(df)]])
    next_price = model.predict(next_index)[0]

    fig, ax = plt.subplots()
    ax.plot(df.index, y, label="–Ü—Å—Ç–æ—Ä—ñ—è")
    ax.plot(df.index[-1] + pd.Timedelta(hours=1), next_price, 'go', label="–ü—Ä–æ–≥–Ω–æ–∑ (Linear)")
    plt.title("–ü—Ä–æ–≥–Ω–æ–∑ BTC (Linear Regression)")
    plt.xlabel("–ß–∞—Å")
    plt.ylabel("–¶—ñ–Ω–∞ (USD)")
    plt.legend()
    plt.tight_layout()

    buf = BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    return y[-1], next_price, buf

# === Random Forest
def rf_predict_price(return_current_price=False):
    df = yf.download("BTC-USD", period="2d", interval="1h")
    df.dropna(inplace=True)

    X = np.arange(len(df)).reshape(-1, 1)
    y = df["Close"].values

    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X, y)

    next_index = np.array([[len(df)]])
    next_price = model.predict(next_index)[0]

    fig, ax = plt.subplots()
    ax.plot(df.index, y, label="–Ü—Å—Ç–æ—Ä—ñ—è")
    ax.plot(df.index[-1] + pd.Timedelta(hours=1), next_price, 'ro', label="–ü—Ä–æ–≥–Ω–æ–∑ (RF)")
    plt.title("–ü—Ä–æ–≥–Ω–æ–∑ BTC (Random Forest)")
    plt.xlabel("–ß–∞—Å")
    plt.ylabel("–¶—ñ–Ω–∞ (USD)")
    plt.legend()
    plt.tight_layout()

    buf = BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)

    if return_current_price:
        return y[-1], next_price, buf
    return next_price, buf

# === Telegram-–∫–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥-–ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–æ—Ä –±–æ—Ç.\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/predict [linear|rf] ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ —Ü—ñ–Ω–∏ BTC\n"
        "/custom x y a n ‚Äî –≤–ª–∞—Å–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞\n"
        "/custom_predict y a n ‚Äî —Ñ–æ—Ä–º—É–ª–∞ –∑ —Ü—ñ–Ω–æ—é BTC\n"
        "/auto [—Ö–≤] ‚Äî –∞–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑\n"
        "/stop ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ –∞–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑"
    )

async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        model_type = context.args[0].lower() if context.args else "linear"

        if model_type == "rf":
            now_price, predicted_price, plot_buf = rf_predict_price(return_current_price=True)
            model_name = "Random Forest"
        else:
            now_price, predicted_price, plot_buf = linear_predict_price()
            model_name = "Linear Regression"

        change = predicted_price - now_price
        change_pct = (change / now_price) * 100

        text = (
            f"üìä –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${now_price:.2f}\n"
            f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑ ({model_name}): ${predicted_price:.2f}\n"
            f"üìà –ó–º—ñ–Ω–∞: ${change:.2f} ({change_pct:.2f}%)"
        )
        await update.message.reply_text(text)
        await update.message.reply_photo(photo=plot_buf)

    except Exception as e:
        logging.exception("‚ùóÔ∏è–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É")
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def custom(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(context.args) != 4:
            await update.message.reply_text("‚ùóÔ∏è –§–æ—Ä–º–∞—Ç: /custom x y a n")
            return
        x, y, a = float(context.args[0]), float(context.args[1]), float(context.args[2])
        n = int(context.args[3])
        result = custom_algorithm(x, y, a, n)
        await update.message.reply_text(f"üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç A = {result:.4f}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def custom_predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(context.args) != 3:
            await update.message.reply_text("‚ùóÔ∏è –§–æ—Ä–º–∞—Ç: /custom_predict y a n")
            return
        df = fetch_latest_data()
        x = df["price"].iloc[-1]
        y = float(context.args[0])
        a = float(context.args[1])
        n = int(context.args[2])
        result = custom_algorithm(x, y, a, n)
        text = (
            f"üìä –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ BTC (x) = {x:.2f}\n"
            f"üîß y = {y}, a = {a}, n = {n}\n"
            f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç A = {result:.4f}"
        )
        await update.message.reply_text(text)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# === –ê–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑
auto_tasks = {}

async def auto_predict(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    try:
        now_price, predicted_price, plot_buf = linear_predict_price()
        change = predicted_price - now_price
        change_pct = (change / now_price) * 100
        text = (
            f"üìä –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${now_price:.2f}\n"
            f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑: ${predicted_price:.2f}\n"
            f"üìà –ó–º—ñ–Ω–∞: ${change:.2f} ({change_pct:.2f}%)"
        )
        await context.bot.send_message(chat_id=chat_id, text=text)
        await context.bot.send_photo(chat_id=chat_id, photo=plot_buf)
    except Exception as e:
        await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def auto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if len(context.args) != 1:
            await update.message.reply_text("‚ùóÔ∏è –§–æ—Ä–º–∞—Ç: /auto 5 (—Ö–≤–∏–ª–∏–Ω)")
            return
        minutes = int(context.args[0])
        chat_id = update.effective_chat.id
        if chat_id in auto_tasks:
            auto_tasks[chat_id].schedule_removal()
        job = context.job_queue.run_repeating(auto_predict, interval=minutes * 60, first=0, chat_id=chat_id)
        auto_tasks[chat_id] = job
        await update.message.reply_text(f"‚úÖ –ê–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–∂–Ω—ñ {minutes} —Ö–≤–∏–ª–∏–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in auto_tasks:
        auto_tasks[chat_id].schedule_removal()
        del auto_tasks[chat_id]
        await update.message.reply_text("‚õîÔ∏è –ê–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑ –∑—É–ø–∏–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ùóÔ∏è –ê–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.")

# === Flask
flask_app = Flask(__name__)
@flask_app.route('/')
def index():
    return "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

# === Telegram –∑–∞–ø—É—Å–∫
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

async def run_bot():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("predict", predict))
    app.add_handler(CommandHandler("custom", custom))
    app.add_handler(CommandHandler("custom_predict", custom_predict))
    app.add_handler(CommandHandler("auto", auto))
    app.add_handler(CommandHandler("stop", stop))
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await asyncio.Event().wait()

# === –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 4000))
    threading.Thread(target=lambda: flask_app.run(host='0.0.0.0', port=port), daemon=True).start()
    asyncio.run(run_bot())