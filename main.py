import os
import logging
import asyncio
import requests
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from flask import Flask, request
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.preprocessing import StandardScaler
from prophet import Prophet

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
logging.basicConfig(level=logging.INFO)

# --- Telegram token —Ç–∞ webhook URL
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: https://yourapp.onrender.com

bot = Bot(token=TELEGRAM_TOKEN)

# --- Flask –¥–æ–¥–∞—Ç–æ–∫
flask_app = Flask(__name__)

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ Binance
def fetch_historical_data():
    url = "https://api.binance.com/api/v3/klines"
    params = {"symbol": "BTCUSDT", "interval": "1d", "limit": 200}
    resp = requests.get(url, params=params)
    resp.raise_for_status()
    raw_data = resp.json()
    df = pd.DataFrame(raw_data, columns=[
        "timestamp", "open", "high", "low", "close", "volume",
        "close_time", "quote_asset_volume", "num_trades",
        "taker_buy_base_volume", "taker_buy_quote_volume", "ignore"
    ])
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit='ms')
    df["close"] = df["close"].astype(float)
    df = df[["timestamp", "close"]]
    df.rename(columns={"timestamp": "ds", "close": "y"}, inplace=True)
    return df

# --- –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—É
def plot_forecast(df, future_dates, predictions, model_name):
    plt.figure(figsize=(12, 6))
    plt.plot(df["ds"], df["y"], label="–Ü—Å—Ç–æ—Ä—ñ—è", color="#2563eb", linewidth=2)
    plt.plot(future_dates, predictions, label="–ü—Ä–æ–≥–Ω–æ–∑", color="#22c55e", linewidth=2, linestyle="--")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–¶—ñ–Ω–∞ (USD)")
    plt.title(f"Bitcoin ({model_name} –ø—Ä–æ–≥–Ω–æ–∑)")
    plt.legend()
    plt.grid(True, linestyle="--", alpha=0.3)
    plt.tight_layout()
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    return buf

# --- –ü–æ–±—É–¥–æ–≤–∞ —Ñ—ñ—á
def prepare_features(df):
    df["day"] = df["ds"].dt.day
    df["month"] = df["ds"].dt.month
    df["year"] = df["ds"].dt.year
    df["dayofweek"] = df["ds"].dt.dayofweek
    df["lag1"] = df["y"].shift(1)
    df["lag2"] = df["y"].shift(2)
    df = df.dropna()
    features = ["day", "month", "year", "dayofweek", "lag1", "lag2"]
    return df[features], df["y"], features

# --- –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –∫—Ä–∏–ø—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–æ—Ä üìà\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /predict model=prophet/randomforest/svr days=1..7\n"
        "–ü—Ä–∏–∫–ª–∞–¥: /predict model=svr days=3"
    )

async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        model_type = "prophet"
        days = 3
        if context.args:
            for arg in context.args:
                if arg.startswith("model="):
                    model_type = arg.split("=")[1].lower()
                elif arg.startswith("days="):
                    days = int(arg.split("=")[1])

        df = fetch_historical_data()
        now_price = df["y"].iloc[-1]
        predicted_values = []
        future_dates = []

        if model_type == "prophet":
            model = Prophet()
            model.fit(df)
            future = model.make_future_dataframe(periods=days)
            forecast = model.predict(future)
            predicted_values = forecast.iloc[-days:]["yhat"].values
            future_dates = forecast.iloc[-days:]["ds"].values
            model_label = "Prophet"

        elif model_type in ["randomforest", "svr"]:
            X, y, features = prepare_features(df)
            scaler = StandardScaler()
            X_scaled = X.copy()
            X_scaled[["day", "month", "year", "dayofweek"]] = scaler.fit_transform(
                X_scaled[["day", "month", "year", "dayofweek"]]
            )

            if model_type == "randomforest":
                model = RandomForestRegressor(n_estimators=200, random_state=42)
            else:
                model = SVR(kernel='rbf')

            model.fit(X_scaled, y)

            last_row = df.iloc[-1:].copy()
            prev2 = df.iloc[-2]["y"]

            for _ in range(days):
                features_input = {
                    "day": last_row["ds"].dt.day.values[0],
                    "month": last_row["ds"].dt.month.values[0],
                    "year": last_row["ds"].dt.year.values[0],
                    "dayofweek": last_row["ds"].dt.dayofweek.values[0],
                    "lag1": last_row["y"].values[0],
                    "lag2": prev2,
                }
                X_pred = pd.DataFrame([features_input])[features]
                X_pred_scaled = X_pred.copy()
                X_pred_scaled[["day", "month", "year", "dayofweek"]] = scaler.transform(
                    X_pred_scaled[["day", "month", "year", "dayofweek"]]
                )

                pred = model.predict(X_pred_scaled)[0]
                predicted_values.append(pred)
                next_date = last_row["ds"].values[0] + pd.Timedelta(days=1)
                future_dates.append(next_date)
                prev2 = last_row["y"].values[0]
                last_row = pd.DataFrame({"ds": [next_date], "y": [pred]})

            model_label = "RandomForest" if model_type == "randomforest" else "SVR"

        else:
            await update.message.reply_text("‚ùóÔ∏è–ú–æ–¥–µ–ª—å –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π model=prophet, svr –∞–±–æ randomforest.")
            return

        plot_buf = plot_forecast(df, future_dates, predicted_values, model_label)
        text = f"üìä –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${now_price:.2f}\nüîÆ –ü—Ä–æ–≥–Ω–æ–∑ ({model_label}): ${predicted_values[-1]:.2f}"
        await update.message.reply_photo(photo=plot_buf, caption=text)

    except Exception as e:
        logging.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É")
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# --- Flask route –¥–ª—è webhook
@flask_app.route(f"/webhook/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    data = request.get_json(force=True)
    update = Update.de_json(data, bot)
    asyncio.create_task(application.update_queue.put(update))
    return "ok", 200

# --- Flask route –¥–ª—è —Ç–µ—Å—Ç—É
@flask_app.route('/')
def index():
    return "‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

# --- Telegram Application
application = Application.builder().token(TELEGRAM_TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("predict", predict))

# --- –ó–∞–ø—É—Å–∫ webhook –Ω–∞ Render
if __name__ == '__main__':
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook
    async def set_webhook():
        await bot.set_webhook(f"{WEBHOOK_URL}/webhook/{TELEGRAM_TOKEN}")
        logging.info("‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    asyncio.run(set_webhook())
    port = int(os.environ.get("PORT", 4000))
    flask_app.run(host="0.0.0.0", port=port)
