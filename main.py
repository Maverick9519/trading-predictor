import os
import threading
import asyncio
import logging
import datetime
import random
import matplotlib.pyplot as plt
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)

auto_tasks = {}

# === –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É –∑ –≥—Ä–∞—Ñ—ñ–∫–æ–º ===
async def auto_predict(context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = context.job.chat_id

        # –°–∏–º—É–ª—å–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤–æ—ó —Ä–µ–∞–ª—å–Ω—ñ
        current_price = 107628.76
        forecast_price = 113010.20
        change = forecast_price - current_price
        change_percent = (change / current_price) * 100

        # –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—É
        today = datetime.date.today()
        dates = [today + datetime.timedelta(days=i*30) for i in range(6)]
        prices = [current_price + (change * i / 5) + random.uniform(-100, 100) for i in range(6)]

        plt.figure(figsize=(8, 4))
        plt.plot(dates, prices, marker='o')
        plt.title("Bitcoin (–ø–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞)")
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–¶—ñ–Ω–∞ (USD)")
        plt.grid(True)
        plt.tight_layout()
        plt.savefig("chart.png")
        plt.close()

        # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –≥—Ä–∞—Ñ—ñ–∫—É
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üìä –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${current_price}\nüîÆ –ü—Ä–æ–≥–Ω–æ–∑: ${forecast_price}\nüìà –ó–º—ñ–Ω–∞: ${round(change, 2)} ({round(change_percent, 2)}%)"
        )
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=open("chart.png", "rb")
        )

    except Exception as e:
        await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø—Ä–æ–≥–Ω–æ–∑—ñ: {e}")


# === –ö–æ–º–∞–Ω–¥–∞ /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in auto_tasks:
        auto_tasks[chat_id].schedule_removal()
        del auto_tasks[chat_id]
        await update.message.reply_text("‚õîÔ∏è –ê–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑ –∑—É–ø–∏–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ùóÔ∏è –ê–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.")


# === –ö–æ–º–∞–Ω–¥–∞ /auto (–æ–Ω–æ–≤–ª–µ–Ω–∞ –∑ –≥—Ä–∞—Ñ—ñ–∫–æ–º)
async def auto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        minutes = int(context.args[0]) if context.args else 1
        chat_id = update.effective_chat.id

        if chat_id in auto_tasks:
            auto_tasks[chat_id].schedule_removal()

        job = context.job_queue.run_repeating(
            auto_predict, interval=minutes * 60, first=0, chat_id=chat_id
        )
        auto_tasks[chat_id] = job
        await update.message.reply_text(f"‚úÖ –ê–≤—Ç–æ-–ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–∂–Ω—ñ {minutes} —Ö–≤–∏–ª–∏–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


# === –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
async def run_bot():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞")
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("predict", predict))
    app.add_handler(CommandHandler("custom", custom))
    app.add_handler(CommandHandler("auto", auto))
    app.add_handler(CommandHandler("stop", stop))
    await app.initialize()
    await app.start()
    await app.updater.start_polling()


# === –ì–æ–ª–æ–≤–Ω–∏–π –∑–∞–ø—É—Å–∫
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 4000))
    threading.Thread(target=lambda: flask_app.run(host='0.0.0.0', port=port), daemon=True).start()
    loop = asyncio.get_event_loop()
    loop.create_task(run_bot())
    loop.run_forever()
